names(cystfibr)[1] = "age"
#6)
names(cystfibr)[6] = "Forced expiratory volume"
names(cystfibr)
data("energy")
energy
#7) stature
#8)
boxplot(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"], ylab = "Energy expenditure (MJ)", names = c("Lean", "Obese"))
#9)
#H0: σ1=σ2
ts = var(energy[which(energy$stature == "lean"),"expend"])/var(energy[which(energy$stature == "obese"),"expend"])
#0.784446
#10)
#larger variance on top
ts = var(energy[which(energy$stature == "obese"),"expend"])/var(energy[which(energy$stature == "lean"),"expend"])
#ts = 1.27485
2*(1-pf(ts, length(which(energy$stature == "obese"))-1, length(which(energy$stature == "lean"))-1))
#pvalue = 0.679746
#alternatively...
var.test(energy[which(energy$stature == "obese"),"expend"], energy[which(energy$stature == "lean"),"expend"], alternative = "two.sided")
#F = 1.2748, num df = 8, denom df = 12, p-value = 0.6797
#11) Given such a high p-value, I conclude we should not reject the Ho based on this data. This pvalue estimates a 67% probability of observing this data given Ho was to be true. Hence, I conclude lean and obese women have the same variance for energy expense.
#12) Because the null hypothesis is that mu1 = mu2, thus mu1-mu2 = 0.
#13)
mytwosamplettest = function(pop1, pop2) {
mean1 = mean(pop1)
mean2 = mean(pop2)
n1 = length(pop1)
n2 = length(pop2)
s1 = sd(pop1)
s2 = sd(pop2)
TS = (mean1-mean2)/sqrt(((1/n1)+(1/n2))*(((s1^2)*(n1-1))+((s2^2)*(n2-1)))/(n1+n2-2))
return(TS)
}
mytwosamplettest(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"])
#Ans: -3.945565
#14)
mytwosamplettest = function(pop1, pop2) {
mean1 = mean(pop1)
mean2 = mean(pop2)
n1 = length(pop1)
n2 = length(pop2)
s1 = sd(pop1)
s2 = sd(pop2)
TS = (mean1-mean2)/sqrt(((1/n1)+(1/n2))*(((s1^2)*(n1-1))+((s2^2)*(n2-1)))/(n1+n2-2))
print("Test statistic:")
print(TS)  #a)
print("Degrees of freedom:")
print(n1+n2-2) #b)
Pvalue = 2*pt(TS, (n1+n2-2))
print("p-value for the alternative hypothesis (mu1 != mu2):")
print(Pvalue) #c)
return(TS)
}
#15) H1: mu1 > mu2
#The population1 mean is larger than the population2 mean
#pvalue: pt(TS, (n1+n2-2))
#Still area to left, as it corresponds to the alternative, but not 2* as it is only one tail we are concerned with.
#Checking answers:
var.test(energy$expend~energy$stature)
t.test(energy$expend~energy$stature, var.equal=T)
t.test(energy$expend[which(energy$stature=="lean")],energy$expend[which(energy$stature=="obese")], var.equal=T)
##Paragraph##
#I. In this assignment we looked at a dataset that described the energy expenditure in MJ of women who were either lean or obese.
#II. Figure 1 shows the distributions of the variable "Energy expense (MJ)" for each subset of the data: lean women, and obese women. We can see how the "Obese" distribution has a larger median than the "Lean" distribution.
#III. I concluded that the variance of the energy expense for obese women was not significantly larger than that for lean women (one-tailed p = 0.6797, Ftest statistic = 1.2748). However, I concluded that the mean energy expense for lean women was significantly different than that for obese women (two-tailed p = 0.000799, Ttest statistic = -3.9456).
#IV. The homocedasticity test was carried out to check if the distributions analyzed could have come from populations with the same variances. This is important beacouse is a critical assumption to be able to carry out the Ttest for 2 samples.
2*(1-pf(ts, length(which(energy$stature == "obese"))-1, length(which(energy$stature == "lean"))-1))
var.test(energy$expend~energy$stature)
mytwosamplettest(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"])
#Ans: -3.945565
#14)
mytwosamplettest = function(pop1, pop2) {
mean1 = mean(pop1)
mean2 = mean(pop2)
n1 = length(pop1)
n2 = length(pop2)
s1 = sd(pop1)
s2 = sd(pop2)
TS = (mean1-mean2)/sqrt(((1/n1)+(1/n2))*(((s1^2)*(n1-1))+((s2^2)*(n2-1)))/(n1+n2-2))
print("Test statistic:")
print(TS)  #a)
print("Degrees of freedom:")
print(n1+n2-2) #b)
Pvalue = 2*pt(TS, (n1+n2-2))
print("p-value for the alternative hypothesis (mu1 != mu2):")
print(Pvalue) #c)
return(TS)
}
mytwosamplettest(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"])
##Hyperiid-Host Associations
library(stringr)
library(ape)
library(phytools)
library(ggtree)
library(reshape2)
library(igraph)
library(network)
library(dendextend)
library(picante)
library(paco)
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
amphipodB = read.nexus("Amphipods/Interesting\ amphipods/output/OI/datamphipodOI18S_MSA_bayesian_run_1.tree")
plot(amphipodB)
()
nodelabels()
amphipodB$tip.label[which(amphipodB$tip.label == "Phronima_species")] = "Phronima_sedentaria"
amphipodB$tip.label[which(amphipodB$tip.label == "Paraphronima_species")] = "Paraphronima_gracilis"
amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Hyperietta_stephenseni"))
amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Lestrigonus_bengalensis"))
plot(amphipodB)
nodelabels()
amphipodB=reroot(amphipodB, 62)
plot(amphipodB)
refhostree = read.nexus("FirstHostRound/output/host18S_bayesian2_run_1.tree")
refhostree$tip.label
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.EXThostML_boot100")
badtips = which(!(MLext$tip.label %in% refhostree$tip.label))
hostML = drop.tip(MLext, badtips)
plot(hostML)
nodelabels()
hostML = reroot(hostML, 85)
plot(hostML)
TREE = hostML
TREE$tip.label = str_replace_all(TREE$tip.label,'_',' ')
#amphipodML$tip.label = str_replace_all(amphipodML$tip.label,'_',' ')
amphipodB$tip.label = str_replace_all(amphipodB$tip.label,'_',' ')
TREE$tip.label
amphipodB$tip.label
amphispp = amphipodB$tip.label
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% amphispp),]
prunedass = as.matrix(ass[which(ass$amphipod %in% amphispp),])
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
heatmap(as.matrix(prunedmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
View(prunedmatrix)
heatmap(as.matrix(prunedmatrix[,2:ncol(prunedmatrix)]), col=c("white", "orange"), Rowv=NA, Colv=NA)
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% TREE$tip.label)])
nodatatipnames = TREE$tip.label[which(!(TREE$tip.label %in% sharedspp))]
nodatatips = c(1:length(TREE$tip.label))[which(TREE$tip.label %in% nodatatipnames)]
prunedtree = drop.tip(TREE, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
amphipodB = read.nexus("Amphipods/Interesting\ amphipods/output/OI/datamphipodOI18S_MSA_bayesian_run_1.tree")
plot(amphipodB)
amphipodB$tip.label[which(amphipodB$tip.label == "Phronima_species")] = "Phronima_sedentaria"
amphipodB$tip.label[which(amphipodB$tip.label == "Paraphronima_species")] = "Paraphronima_gracilis"
#amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Hyperietta_stephenseni"))
amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Lestrigonus_bengalensis"))
plot(amphipodB)
nodelabels()
amphipodB=reroot(amphipodB, 62)
plot(amphipodB)
#HOST TREE
refhostree = read.nexus("FirstHostRound/output/host18S_bayesian2_run_1.tree")
refhostree$tip.label
#Bayesian GTR+Gamma tree
# extreeBAYES = read.nexus("ExtendedHosts/output/host_ext_MSA_bayesian_run_1.tree")
# badtips = which(!(extreeBAYES$tip.label %in% hostree$tip.label))
# hostBayes = drop.tip(extreeBAYES, badtips)
# plot(hostBayes)
# nodelabels()
# hostBayes = reroot(hostBayes, 80)
# plot(hostBayes)
# TREE = hostBayes
#GTR+Gamma Maximum Likelihood
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.EXThostML_boot100")
badtips = which(!(MLext$tip.label %in% refhostree$tip.label))
hostML = drop.tip(MLext, badtips)
plot(hostML)
nodelabels()
hostML = reroot(hostML, 85)
plot(hostML)
TREE = hostML
#replace _ with spaces in tipnames of both trees
TREE$tip.label = str_replace_all(TREE$tip.label,'_',' ')
#amphipodML$tip.label = str_replace_all(amphipodML$tip.label,'_',' ')
amphipodB$tip.label = str_replace_all(amphipodB$tip.label,'_',' ')
TREE$tip.label
amphipodB$tip.label
#prune the matrix according to amphipod spp available in phylogeny
amphispp = amphipodB$tip.label
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% amphispp),]
prunedass = as.matrix(ass[which(ass$amphipod %in% amphispp),])
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
heatmap(as.matrix(prunedmatrix[,2:ncol(prunedmatrix)]), col=c("white", "orange"), Rowv=NA, Colv=NA)
#Get species shared with the hosts
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% TREE$tip.label)])
#prune the host tree with the shared species in association data and amphipod tree
nodatatipnames = TREE$tip.label[which(!(TREE$tip.label %in% sharedspp))]
nodatatips = c(1:length(TREE$tip.label))[which(TREE$tip.label %in% nodatatipnames)]
prunedtree = drop.tip(TREE, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
amphipodB = read.nexus("Amphipods/Interesting\ amphipods/output/OI/datamphipodOI18S_MSA_bayesian_run_1.tree")
plot(amphipodB)
amphipodB$tip.label[which(amphipodB$tip.label == "Phronima_species")] = "Phronima_sedentaria"
amphipodB$tip.label[which(amphipodB$tip.label == "Paraphronima_species")] = "Paraphronima_gracilis"
#amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Hyperietta_stephenseni"))
amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Lestrigonus_bengalensis"))
plot(amphipodB)
nodelabels()
amphipodB=reroot(amphipodB, 62)
plot(amphipodB)
#HOST TREE
refhostree = read.nexus("FirstHostRound/output/host18S_bayesian2_run_1.tree")
refhostree$tip.label
#Bayesian GTR+Gamma tree
# extreeBAYES = read.nexus("ExtendedHosts/output/host_ext_MSA_bayesian_run_1.tree")
# badtips = which(!(extreeBAYES$tip.label %in% hostree$tip.label))
# hostBayes = drop.tip(extreeBAYES, badtips)
# plot(hostBayes)
# nodelabels()
# hostBayes = reroot(hostBayes, 80)
# plot(hostBayes)
# TREE = hostBayes
#GTR+Gamma Maximum Likelihood
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.EXThostML_boot100")
badtips = which(!(MLext$tip.label %in% refhostree$tip.label))
hostML = drop.tip(MLext, badtips)
plot(hostML)
nodelabels()
hostML = reroot(hostML, 85)
plot(hostML)
TREE = hostML
#replace _ with spaces in tipnames of both trees
TREE$tip.label = str_replace_all(TREE$tip.label,'_',' ')
#amphipodML$tip.label = str_replace_all(amphipodML$tip.label,'_',' ')
amphipodB$tip.label = str_replace_all(amphipodB$tip.label,'_',' ')
TREE$tip.label
amphipodB$tip.label
#prune the matrix according to amphipod spp available in phylogeny
amphispp = amphipodB$tip.label
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% amphispp),]
prunedass = as.matrix(ass[which(ass$amphipod %in% amphispp),])
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
heatmap(as.matrix(prunedmatrix[,2:ncol(prunedmatrix)]), col=c("white", "orange"), Rowv=NA, Colv=NA)
#Get species shared with the hosts
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% TREE$tip.label)])
#prune the host tree with the shared species in association data and amphipod tree
nodatatipnames = TREE$tip.label[which(!(TREE$tip.label %in% sharedspp))]
nodatatips = c(1:length(TREE$tip.label))[which(TREE$tip.label %in% nodatatipnames)]
prunedtree = drop.tip(TREE, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% ultram$tip.label),])
#reprunedass = reprunedass[match(ultram$tip.label, reprunedass[,2]),]
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
reprunedassmatrix = reprunedassmatrix[,2:ncol(reprunedassmatrix)]
#write.table(reprunedassmatrix, "reprunedassmatrix.txt", sep='\t')
class(reprunedassmatrix) <- "numeric"
rownames(reprunedassmatrix) = dcast(as.data.frame(reprunedass), amphipod~host, length)[,1]
heatmap(reprunedassmatrix[,2:ncol(reprunedassmatrix)], col=c("white", "orange"), Rowv=NA, Colv=NA)
prunedamphipodB = drop.tip(amphipodB, which(!(amphipodB$tip.label %in% rownames(reprunedassmatrix))))
ultramphipod = chronos(prunedamphipodB)
plot(ultramphipod)
fix(ultramphipod)
ass[which(ass$host == "Collozoum inerme")]
ass[which(ass$host == "Collozoum inerme"),]
plot(amphipodB)
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
#Load amphipod tree Maximum Likelihood
# amphipodML = read.tree("Amphipods/Interesting\ amphipods/RAxML/RAxML_bipartitions.datamphipod18S_ML_boot100")
# plot(amphipodML)
# amphipodML$tip.label[which(amphipodML$tip.label == "Phronima_species")] = "Phronima_sedentaria"
# nodelabels()
# amphipodML=root(amphipodML, 33)
# plot(amphipodML)
#Load amphipod tree Bayesian
amphipodB = read.nexus("Amphipods/Interesting\ amphipods/output/OI/datamphipodOI18S_MSA_bayesian_run_1.tree")
plot(amphipodB)
amphipodB$tip.label[which(amphipodB$tip.label == "Phronima_species")] = "Phronima_sedentaria"
amphipodB$tip.label[which(amphipodB$tip.label == "Paraphronima_species")] = "Paraphronima_gracilis"
#cheating below!
amphipodB$tip.label[which(amphipodB$tip.label == "Hyperietta_stephenseni")] = "NOPE"
amphipodB$tip.label[which(amphipodB$tip.label == "Hyperietta_parviceps")] = "Hyperietta_stephenseni"
amphipodB = drop.tip(amphipodB, which(amphipodB$tip.label == "Lestrigonus_bengalensis"))
plot(amphipodB)
nodelabels()
amphipodB=reroot(amphipodB, 62)
plot(amphipodB)
#HOST TREE
refhostree = read.nexus("FirstHostRound/output/host18S_bayesian2_run_1.tree")
refhostree$tip.label
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.EXThostML_boot100")
badtips = which(!(MLext$tip.label %in% refhostree$tip.label))
hostML = drop.tip(MLext, badtips)
plot(hostML)
nodelabels()
hostML = reroot(hostML, 85)
plot(hostML)
TREE = hostML
TREE$tip.label = str_replace_all(TREE$tip.label,'_',' ')
#amphipodML$tip.label = str_replace_all(amphipodML$tip.label,'_',' ')
amphipodB$tip.label = str_replace_all(amphipodB$tip.label,'_',' ')
TREE$tip.label
amphipodB$tip.label
amphispp = amphipodB$tip.label
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% amphispp),]
prunedass = as.matrix(ass[which(ass$amphipod %in% amphispp),])
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
heatmap(as.matrix(prunedmatrix[,2:ncol(prunedmatrix)]), col=c("white", "orange"), Rowv=NA, Colv=NA)
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% TREE$tip.label)])
nodatatipnames = TREE$tip.label[which(!(TREE$tip.label %in% sharedspp))]
nodatatips = c(1:length(TREE$tip.label))[which(TREE$tip.label %in% nodatatipnames)]
prunedtree = drop.tip(TREE, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% ultram$tip.label),])
#reprunedass = reprunedass[match(ultram$tip.label, reprunedass[,2]),]
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
reprunedassmatrix = reprunedassmatrix[,2:ncol(reprunedassmatrix)]
#write.table(reprunedassmatrix, "reprunedassmatrix.txt", sep='\t')
class(reprunedassmatrix) <- "numeric"
rownames(reprunedassmatrix) = dcast(as.data.frame(reprunedass), amphipod~host, length)[,1]
heatmap(reprunedassmatrix[,2:ncol(reprunedassmatrix)], col=c("white", "orange"), Rowv=NA, Colv=NA)
#prune the amphipod tree to match the species in reprunedmatrix
prunedamphipodB = drop.tip(amphipodB, which(!(amphipodB$tip.label %in% rownames(reprunedassmatrix))))
ultramphipod = chronos(prunedamphipodB)
plot(ultramphipod)
prunedmatrix_nosppcol = prunedmatrix[,-1]
comm = t(prunedmatrix_nosppcol)
comm = comm[rowSums(comm)!=0,]
#write.table(comm, "comm.txt", sep='\t')
par(mar=rep(5,4))
heatmap(as.matrix(comm), Rowv=NA, Colv=NA, col = c("white","grey"))
amphi_dist=species.dist(comm)
heatmap(as.matrix(amphi_dist), Rowv=NA, Colv=NA, col=rev(heat.colors(5)))
plot(hclust(amphi_dist))
AD_MDS = cmdscale(amphi_dist)
plot(AD_MDS[,1], AD_MDS[,2])
text(AD_MDS[,1], AD_MDS[,2], labels = row.names(AD_MDS), cex=.7)
Comdist = comdist(comm,amphi_dist)
heatmap(as.matrix(Comdist), Rowv=NA, Colv=NA, col=rev(heat.colors(8)))
par(mar=rep(1,4))
plot(hclust(Comdist))
C_MDS = cmdscale(Comdist)
plot(C_MDS[,1], C_MDS[,2], xlim = c(-0.25,0.2))
text(C_MDS[,1], C_MDS[,2], labels = row.names(C_MDS), cex=0.5, pos = 1)
CPC = comm.phylo.cor(comm,ultramphipod)
MPC = match.phylo.comm(ultramphipod, comm)
prunecomm = prune.sample(comm,ultramphipod)
prunecomm = comm[,which(colnames(comm) %in% ultramphipod$tip.label)]
#add the phylocom even and random rows
even = rep(0.5,ncol(prunecomm))
random = runif(ncol(prunecomm), 0,1)
prunecomm = rbind(rbind(prunecomm, even), random)
mntd(prunecomm, cophenetic(ultramphipod))
mpd(prunecomm, cophenetic(ultramphipod))
ses.mntd(prunecomm, cophenetic(ultramphipod))
ses.mpd(prunecomm, cophenetic(ultramphipod))
PSClustering = psc(prunecomm, cophenetic(ultramphipod))
mean(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:60]))])
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:60]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:60]))], col='magenta', las=2)
phylostruct(prunecomm, cophenetic(ultramphipod))
reprunedass = as.data.frame(reprunedass)
rownames(reprunedass) = 1:nrow(reprunedass)
cophyloplot(ultramphipod, ultram, assoc = reprunedass, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
cophyloplot(ultramphipod, ultram, assoc = reprunedass, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange", rotate = T)
Parafit = parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
Parafit
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
D = add_pcoord(D)
D = PACo(D, nperm=10, seed=42, method="r0", correction='cailliez')
print(D$gof)
paco_links(D)
table(reprunedass[,2])
specificity = as.vector(table(reprunedass[,1]))
names(specificity) = names(table(reprunedass[,1]))
contMap(ultramphipod, specificity)
popularity = as.vector(table(reprunedass[,2]))
names(popularity) = names(table(reprunedass[,2]))
contMap(ultram, popularity)
plot(amphipodB)
View(ass)
plot(hostML)
amphipodML = read.tree("Amphipods/Interesting\ amphipods/RAxML/OI_constrained/RAxML_bipartitions.datamphipod18S_ML_constrained")
amphipodML = read.tree("Amphipods/Interesting\ amphipods/RAxML/OI_constrained/RAxML_bipartitions.datamphipod18S_ML_constrained")
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
amphipodML = read.tree("Amphipods/Interesting\ amphipods/RAxML/OI_constrained/RAxML_bipartitions.datamphipodOI18S_ML_constrained")
plot(amphipodML)
amphipodML$tip.label[which(amphipodML$tip.label == "Phronima_species")] = "Phronima_sedentaria"
amphipodML$tip.label[which(amphipodML$tip.label == "Paraphronima_species")] = "Paraphronima_gracilis"
amphipodML = drop.tip(amphipodML, which(amphipodML$tip.label == "Lestrigonus_bengalensis"))
plot(amphipodML)
nodelabels()
amphipodML=root(amphipodML, 76)
amphipodML=reroot(amphipodML, 76)
plot(amphipodML)
refhostree = read.nexus("FirstHostRound/output/host18S_bayesian2_run_1.tree")
refhostree$tip.label
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.host_ext2_ML_boot100")
plot(hostML)
plot(MLext)
nodelabels()
hostML = reroot(hostML, 80)
MLext = reroot(MLext, 80)
plot(MLext)
TREE = hostML
TREE = MLext
TREE$tip.label = str_replace_all(TREE$tip.label,'_',' ')
amphipodB$tip.label = str_replace_all(amphipodB$tip.label,'_',' ')
amphipodML$tip.label = str_replace_all(amphipodML$tip.label,'_',' ')
TREE$tip.label
amphipodB$tip.label
amphipodML$tip.label
amphispp = amphipodML$tip.label
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% amphispp),]
prunedass = as.matrix(ass[which(ass$amphipod %in% amphispp),])
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
heatmap(as.matrix(prunedmatrix[,2:ncol(prunedmatrix)]), col=c("white", "orange"), Rowv=NA, Colv=NA)
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% TREE$tip.label)])
nodatatipnames = TREE$tip.label[which(!(TREE$tip.label %in% sharedspp))]
nodatatips = c(1:length(TREE$tip.label))[which(TREE$tip.label %in% nodatatipnames)]
prunedtree = drop.tip(TREE, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% ultram$tip.label),])
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
reprunedassmatrix = reprunedassmatrix[,2:ncol(reprunedassmatrix)]
class(reprunedassmatrix) <- "numeric"
rownames(reprunedassmatrix) = dcast(as.data.frame(reprunedass), amphipod~host, length)[,1]
heatmap(reprunedassmatrix[,2:ncol(reprunedassmatrix)], col=c("white", "orange"), Rowv=NA, Colv=NA)
prunedamphipodML = drop.tip(amphipodML, which(!(amphipodML$tip.label %in% rownames(reprunedassmatrix))))
ultramphipod = chronos(prunedamphipodB)
ultramphipod = chronos(prunedamphipodML)
plot(ultramphipod)
g <- graph_from_edgelist(as.matrix(reprunedass))
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
V(g)$types <- ifelse(V(g)$name %in% hosts, F, T)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 15, vgap = 600)
a = tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lo, vertex.label.dist = 0.3, vertex.label.cex = 0.5)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
prunedmatrix_nosppcol = prunedmatrix[,-1]
comm = t(prunedmatrix_nosppcol)
comm = comm[rowSums(comm)!=0,]
#write.table(comm, "comm.txt", sep='\t')
par(mar=rep(5,4))
heatmap(as.matrix(comm), Rowv=NA, Colv=NA, col = c("white","grey"))
amphi_dist=species.dist(comm)
heatmap(as.matrix(amphi_dist), Rowv=NA, Colv=NA, col=rev(heat.colors(5)))
plot(hclust(amphi_dist))
AD_MDS = cmdscale(amphi_dist)
plot(AD_MDS[,1], AD_MDS[,2])
text(AD_MDS[,1], AD_MDS[,2], labels = row.names(AD_MDS), cex=.7)
Comdist = comdist(comm,amphi_dist)
heatmap(as.matrix(Comdist), Rowv=NA, Colv=NA, col=rev(heat.colors(8)))
par(mar=rep(1,4))
plot(hclust(Comdist))
C_MDS = cmdscale(Comdist)
plot(C_MDS[,1], C_MDS[,2], xlim = c(-0.25,0.2))
text(C_MDS[,1], C_MDS[,2], labels = row.names(C_MDS), cex=0.5, pos = 1)
CPC = comm.phylo.cor(comm,ultramphipod)
MPC = match.phylo.comm(ultramphipod, comm)
prunecomm = prune.sample(comm,ultramphipod)
prunecomm = comm[,which(colnames(comm) %in% ultramphipod$tip.label)]
#add the phylocom even and random rows
even = rep(0.5,ncol(prunecomm))
random = runif(ncol(prunecomm), 0,1)
prunecomm = rbind(rbind(prunecomm, even), random)
#Test for community phylogenetic clustering/overdispersion
mntd(prunecomm, cophenetic(ultramphipod))
mpd(prunecomm, cophenetic(ultramphipod))
ses.mntd(prunecomm, cophenetic(ultramphipod))
ses.mpd(prunecomm, cophenetic(ultramphipod))
PSClustering = psc(prunecomm, cophenetic(ultramphipod))
mean(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:60]))])
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:60]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:60]))], col='magenta', las=2)
phylostruct(prunecomm, cophenetic(ultramphipod))
reprunedass = as.data.frame(reprunedass)
#write.table(reprunedass, "reprunedass.txt", sep='\t')
rownames(reprunedass) = 1:nrow(reprunedass)
cophyloplot(ultramphipod, ultram, assoc = reprunedass, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
cophyloplot(ultramphipod, ultram, assoc = reprunedass, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange", rotate = T)
