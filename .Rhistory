install.packages(c("phytools", "phangorn", "ape"))
install.packages("Bioconductor")
install.packages(c("dplyr", "tidyr", "reshape2", "ggplot2"))
source("https://bioconductor.org/biocLite.R")
biocLite('ggtree')
library("ape", lib.loc="/usr/local/lib/R/3.2/site-library")
library("ggplot2", lib.loc="/usr/local/lib/R/3.2/site-library")
library("ggtree")
library("phytools", lib.loc="/usr/local/lib/R/3.2/site-library")
library("phangorn", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages("geiger")
?ggtree
bioLite
biocLite("ggtree")
library(Bioconductor)
library(biocLite)
library(bioconductor)
source("https://bioconductor.org/biocLite.R")
?bicLite
?biocLite
biocLite("ggtree")
library('ggtree')
install.packages("devtools")
library(devtools)
install_github('ggbiplot', 'vcv')
install_github('ggbiplot/vcv')
install.packages("stringr")
library(devtools)
biocLite(ggtree)
install.packages("ggtree")
library('ggtree')
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
source("https://bioconductor.org/biocLite.R")
biocLite("fftwtools")
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
?t
?qt
qt(1-0.1/2, 8999)
qt(1-0.1/2, 1999)
qt(1-0.1/2, 999)
sqrt(9000)
sqrt(1000)
1.645023/sqrt(9000)
1.64638/sqrt(1000)
qt(1-0.1/2, 49)
qt(1-0.1/2, 199)
sqrt(50)
sqrt(200)
(1.653/14.14)/(1.677/7.07)
qt(1-0.01/2, 39)
127.95+(2.707913*(24.03/sqrt(40)))
127.95-(2.707913*(24.03/sqrt(40)))
(2.707913*(24.03/sqrt(40)))
qt(1-0.01/2, 99)
2.626*5.8/10
(1-pt(3.96551, df = 99))
0.7805/41.1467
##Hyperiid-Host Associations
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
library(reshape2)
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
matplot(assmatrix[,2:94], type="c", lty=1, lwd=1, pch=c(16,19))
library(igraph)
treespp2013 = as.vector(read.table("Hurt2013spp.txt", sep = ",")[,1])
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% treespp2013),]
prunedass = as.matrix(melt(prunedmatrix))[,1:2]
names(prunedass) = c("amphipod", "host")
heatmap(as.matrix(prunedmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
g <- graph_from_edgelist(prunedass)
tkplot(g, vertex.size = 4)
View(prunedass)
prunedass = ass[which(ass$amphipod %in% treespp2013)]
prunedass = ass[which(ass$amphipod %in% treespp2013),]
prunedass = as.matrix(ass[which(ass$amphipod %in% treespp2013),])
View(prunedass)
g <- graph_from_edgelist(prunedass)
#ln = layout_nicely(g)
tkplot(g, vertex.size = 4)
g <- graph_from_edgelist(as.matrix(ass))
#ln = layout_nicely(g)
tkplot(g, vertex.size = 4)
tkplot(g, vertex.size = 4, vertex.color = "orange")
g <- graph_from_edgelist(prunedass)
#ln = layout_nicely(g)
tkplot(g, vertex.size = 4, vertex.color = "orange")
ln = layout_nicely(g)
tkplot(g, vertex.size = 4, vertex.color = "orange", layout=ln)
tkplot(g, vertex.size = 1, vertex.color = "orange", layout=ln)
ass
ass
View(ass)
ass$amphipod = 1:nrow(ass)
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
tkplot(g, vertex.size = 1, vertex.color = "orange", layout=ln, label.dist = 1)
tkplot(g, vertex.size = 1, vertex.color = "orange", layout=ln, vertex.label.dist = 1)
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
library(reshape2)
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
g <- graph_from_edgelist(as.matrix(ass))
tkplot(g, vertex.size = 1, vertex.color = "orange", layout=ln, vertex.label.dist = 1)
treespp2013 = as.vector(read.table("Hurt2013spp.txt", sep = ",")[,1])
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% treespp2013),]
prunedass = as.matrix(ass[which(ass$amphipod %in% treespp2013),])
heatmap(as.matrix(prunedmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
g <- graph_from_edgelist(prunedass)
ln = layout_nicely(g)
tkplot(g, vertex.size = 1, vertex.color = "orange", layout=ln, vertex.label.dist = 1)
plot(g, vertex.size = 1, vertex.color = "orange", layout=ln, vertex.label.dist = 1)
tkplot(g, height = 30, width=30, vertex.size = 1, vertex.color = "orange", layout=ln, vertex.label.dist = 1)
tkplot(g, vertex.size = 2.8, vertex.color = "orange", layout=ln, vertex.label.dist = 1, vertex.label.color = "red")
tkplot(g, canvas.width = 40, canvas.height = 40, vertex.size = 2.8, vertex.color = "orange", layout=ln, vertex.label.dist = 1, vertex.label.color = "red")
tkplot(g, canvas.width = 4000, canvas.height = 4000, vertex.size = 2.8, vertex.color = "orange", layout=ln, vertex.label.dist = 1, vertex.label.color = "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, vertex.color = "orange", layout=ln, vertex.label.dist = 1, vertex.label.color = "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, vertex.color = "orange", layout=ln, vertex.label.dist = 1, vertex.label.color = c("red", "blue"))
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, vertex.color = "orange", layout=ln, vertex.label.dist = 1, vertex.label.color = "red", arrow.size = 0.5)
g
g[1]
g[1][2]
length(g[1])
g$vertex
g$edges
g$attr
g[2]
plot(g[1])
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, vertex.color = "orange", layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "red")
V(g)$color <- ifelse(answers[V(g), 2] == 1, "blue", "red")
V(g)$color <- ifelse(prunedass[V(g), 2] == 1, "blue", "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "red")
V(g)$color <- ifelse(V(g)$Q1_I1 == 1, "lightblue", "orange")
V(g)$color <- ifelse(V(g)$host == 1, "lightblue", "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "blue")
V(g)$color <- ifelse(V(g)$host == 2, "lightblue", "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "blue")
V(g)
E(g)
E(g)[1]
V(g)$host
V(g)$amphipod
V(g)
V(g)$color <- ifelse(V(g) %in% hosts, "lightblue", "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "blue")
V(g)$color <- ifelse(V(g) %in% amphipods, "purple", "orange")
amphipods = sort(as.vector(unique(ass$amphipod)))
g <- graph_from_edgelist(prunedass)
ln = layout_nicely(g)
V(g)$color <- ifelse(V(g) %in% amphipods, "purple", "orange")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "blue")
V(g)$color <- ifelse(V(g) %in% hosts, "purple", "orange")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "blue")
which(V(g) %in% hosts)
fix(V(g))
fix(V(g))
fix(g)
V(g)$name
V(g)$color <- ifelse(V(g)$name %in% hosts, "purple", "orange")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1, vertex.label.color = "blue")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1)
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1)
g <- graph_from_edgelist(as.matrix(ass))
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1)
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout.fruchterman.reingold, vertex.label.dist = 1)
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout_as_bipartite, vertex.label.dist = 1)
inc <- matrix(sample(0:1, 50, replace = TRUE, prob=c(2,1)), 10, 5)
g <- graph_from_incidence_matrix(inc)
plot(g, layout = layout_as_bipartite,
vertex.color=c("green","cyan")[V(g)$type+1])
V(g)
g <- graph_from_edgelist(as.matrix(ass))
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
g <- graph_from_incidence_matrix(inc)
plot(g, layout = layout_as_bipartite,
vertex.color=c("green","cyan")[V(g)$type+1])
g <- graph_from_edgelist(as.matrix(ass))
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
plot(g, layout = layout_as_bipartite,
vertex.color=c("green","cyan")[V(g)$type+1])
V(g)$types <- ifelse(V(g)$name %in% hosts, "1", "2")
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=layout_as_bipartite, vertex.label.dist = 1)
vertex.color=c("green","cyan")[V(g)$type+1])
plot(g, layout = layout_as_bipartite, vertex.color=c("green","cyan")[V(g)$type])
plot(g, layout = layout_as_bipartite)
V(g)
V(g)$type
V(g)$types
Lo = layout_as_bipartite(g, types = V(g)$types)
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
Lo = layout_as_bipartite(g, types = V(g)$types)
V(g)$types <- ifelse(V(g)$name %in% hosts, 1, 2)
Lo = layout_as_bipartite(g, types = V(g)$types)
Lo = layout_as_bipartite(g, types = V(g)$types)
V(g)$types <- ifelse(V(g)$name %in% hosts, T, F)
Lo = layout_as_bipartite(g, types = V(g)$types)
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 10)
tkplot(g, canvas.width = 1800, canvas.height = 800, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 10, vgap = 600)
tkplot(g, canvas.width = 1800, canvas.height = 800, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
Lc = layout.circle(g)
tkplot(g, canvas.width = 1800, canvas.height = 800, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
Lc = layout_in_circle(g)
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
Lc = layout_in_circle(g, order = V(g)$types)
V(g)[3]
Lc = layout_in_circle(g, order = c(V(g)[which(V(g)$name %in% amphipods)], V(g)[which(V(g)$name %in% hosts)]))
tkplot(g, canvas.width = 800, canvas.height = 800, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot(g, canvas.width = 800, canvas.height = 1000, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, rad = 3)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 10, vgap = 600)
tkplot(g, canvas.width = 400, canvas.height = 400, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot(g, canvas.width = 400, canvas.height = 400, vertex.size = 2.8, layout=Lc, vertex.label.dist = 10)
tkplot(g, canvas.width = 400, canvas.height = 400, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1.8)
tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, rad = 1)
tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, radius = 1)
tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, rad(1))
tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, degree = 90, vertex.label.dist = 1)
tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, degrees = 90, vertex.label.dist = 1)
a = tkplot(g, canvas.width = 400, canvas.height = 4000, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
b = tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, vertex.label.size =1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 15, vgap = 600)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a)
tkplot.center(a)
c= tkplot(g, canvas.width = 400, canvas.height = 400, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot.fit.to.screen(c, height = 500, width = 500)
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
g <- graph_from_edgelist(prunedass)
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
V(g)$types <- ifelse(V(g)$name %in% hosts, T, F)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 15, vgap = 600)
Lc = layout_in_circle(g, order = c(V(g)[which(V(g)$name %in% amphipods)], V(g)[which(V(g)$name %in% hosts)]))
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
library(ape)
library(phytools)
library(ggtree)
JC = read.tree(file="output/host18S_bayesian1_run_1.tree")
JC = read.nexus(file="output/host18S_bayesian1_run_1.tree")
plot(JC)
nodelabels()
JC = reroot(JC, 78)
plot(JC)
sharedspp = as.vector(ass$host[which(ass$host %in% JC$tip.label)])
sharedspp = as.vector(prunedass$host[which(prunedass$host %in% JC$tip.label)])
sharedspp = as.vector(prunedass[which(prunedass[,2] %in% JC$tip.label),])
prunedass = str_replace_all(prunedass,'conica','sp.')
library(stringr)
prunedass = str_replace_all(prunedass,'conica','sp.')
prunedass = str_replace_all(prunedass[,2],'conica','sp.')
prunedass = as.matrix(ass[which(ass$amphipod %in% treespp2013),])
prunedass = str_replace_all(prunedass[,2],'conica','sp.')
prunedass
sharedspp = as.vector(prunedass[which(prunedass[,2] %in% JC$tip.label),])
sharedspp = as.vector(prunedass[which(prunedass[,2] %in% JC$tip.label),2])
prunedass[2]
prunedass
prunedass = as.matrix(ass[which(ass$amphipod %in% treespp2013),])
prunedass = str_replace_all(prunedass,'conica','sp.')
prunedass = as.matrix(ass[which(ass$amphipod %in% treespp2013),])
prunedass = as.matrix(str_replace_all(prunedass,'conica','sp.'))
View(prunedass)
prunedass = as.matrix(ass[which(ass$amphipod %in% treespp2013),])
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
View(prunedass)
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% JC$tip.label)])
View(prunedass)
prunedass[,2]
JC$tip.label
prunedass[,2]
JC$tip.label
JC$tip.label = str_replace_all(JC$tip.label,'_',' ')
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% JC$tip.label)])
sharedspp
nodatatipnames = JC$tip.label[which(!(JC$tip.label %in% sharedspp))]
nodatatips = c(1:length(JC$tip.label))[which(JC$tip.label %in% nodatatipnames)]
prunedtree = drop.tip(JC, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% JC$tip.label),])
View(reprunedass)
g <- graph_from_edgelist(as.matrix(reprunedass))
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
V(g)$types <- ifelse(V(g)$name %in% hosts, T, F)
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 15, vgap = 600)
Lc = layout_in_circle(g, order = c(V(g)[which(V(g)$name %in% amphipods)], V(g)[which(V(g)$name %in% hosts)]))
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
V(g)$types <- ifelse(V(g)$name %in% hosts, F, T)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, vertex.label.cex = 2, layout=Lo, vertex.label.dist = 1)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1, vertex.label.cex = 0.2)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1, vertex.label.cex = 0.5)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
g <- graph_from_edgelist(as.matrix(ass))
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 15, vgap = 600)
Lc = layout_in_circle(g, order = c(V(g)[which(V(g)$name %in% amphipods)], V(g)[which(V(g)$name %in% hosts)]))
#Circle layout
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1, vertex.label.cex = 0.5)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
V(g)$types <- ifelse(V(g)$name %in% hosts, F, T)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, vertex.label.cex = 0.5)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
V(g)$color <- ifelse(V(g)$name %in% hosts, "lightblue", "red")
V(g)$label.color <- ifelse(V(g)$name %in% hosts, "blue", "darkred")
V(g)$types <- ifelse(V(g)$name %in% hosts, F, T)
#define layouts
Lo = layout_as_bipartite(g, types = V(g)$types, hgap = 15, vgap = 600)
Lc = layout_in_circle(g, order = c(V(g)[which(V(g)$name %in% amphipods)], V(g)[which(V(g)$name %in% hosts)]))
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 1, vertex.label.cex = 0.5)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
a = tkplot(g, canvas.width = 1200, canvas.height = 900, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, vertex.label.cex = 0.5)
a = tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lo, vertex.label.dist = 1, vertex.label.cex = 0.5)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
#Circle layout
c= tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lc, vertex.label.dist = 0.3, vertex.label.cex = 0.5)
tkplot.fit.to.screen(c, height = 500, width = 500)
tkplot.center(c)
#Bipartite layout
a = tkplot(g, canvas.width = 700, canvas.height = 700, vertex.size = 2.8, layout=Lo, vertex.label.dist = 0.3, vertex.label.cex = 0.5)
tkplot.rotate(a, degree = 90)
tkplot.fit.to.screen(a, height = 500, width = 500)
tkplot.center(a)
ggtree(ultram, layout="circular") + geom_tiplab(aes(angle=angle), color='blue')
dd = data.frame(taxa  = labeled$tip.label, amphipod = reprunedass[,1])
labeled = ultram
dd = data.frame(taxa  = labeled$tip.label, amphipod = reprunedass[,1])
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% JC$tip.label),])
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% JC$tip.label)])
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% ultram$tip.label),])
ultram$tip.label
reprunedass[,1]
unique(reprunedass[,1])
unique(reprunedass[,2)
unique(reprunedass[,2])
ultram$tip.label
reprunedass = reprunedass[match(ultram$tip.label, reprunedassx[,2]),]
reprunedass = reprunedass[match(ultram$tip.label, reprunedass[,2]),]
ultram$tip.label
unique(reprunedass[,2])
dd = data.frame(taxa  = labeled$tip.label, amphipod = reprunedass[,2])
p = ggtree(labeled, layout="rectangular") + xlim(NA, 23)
p = p %<+% dd + geom_tiplab(aes(color=amphipod), show_guide = FALSE, size = 3.5) + geom_tippoint(aes(color=amphipod), alpha=0.25)
p+theme(legend.position="right") + guides(color=guide_legend(title="Amphipod", reverse=T))
dd = data.frame(taxa  = labeled$tip.label, amphipod = reprunedass[,1])
p = ggtree(labeled, layout="rectangular") + xlim(NA, 23)
p = p %<+% dd + geom_tiplab(aes(color=amphipod), show_guide = FALSE, size = 3.5) + geom_tippoint(aes(color=amphipod), alpha=0.25)
p+theme(legend.position="right") + guides(color=guide_legend(title="Amphipod", reverse=T))
labeled$edge.length = labeled$edge.length * 10
dd = data.frame(taxa  = labeled$tip.label, amphipod = reprunedass[,1])
p = ggtree(labeled, layout="rectangular") + xlim(NA, 23)
p = p %<+% dd + geom_tiplab(aes(color=amphipod), show_guide = FALSE, size = 3.5) + geom_tippoint(aes(color=amphipod), alpha=0.25)
p+theme(legend.position="right") + guides(color=guide_legend(title="Amphipod", reverse=T))
reprunedassmatrix = dcast(reprunedass, amphipod~host, length)
reprunedassmatrix = dcast(as.dataframe(reprunedass), amphipod~host, length)
reprunedassmatrix = dcast(as.data.frame(reprunedass), amphipod~host, length)
View(reprunedassmatrix)
evol.rate.mcmc(ultram, reprunedassmatrix)
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
evol.rate.mcmc(ultram, reprunedassmatrix)
evol.rate.mcmc(ultram, reprunedassmatrix[,1])
evol.rate.mcmc(ultram, t(reprunedassmatrix))
heatmap(as.matrix(reprunedassmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
heatmap(as.matrix(reprunedassmatrix[,2:16]), col=c("white", "orange"), Rowv=NA, Colv=NA)
reprunedassmatrix[,2:16]
heatmap(as.matrix(reprunedassmatrix[,2:17]), col=c("white", "orange"), Rowv=NA, Colv=NA)
heatmap(as.matrix(reprunedassmatrix[,2:15]), col=c("white", "orange"), Rowv=NA, Colv=NA)
heatmap(as.matrix(reprunedassmatrix[,2:16]), col=c("white", "orange"), Rowv=NA, Colv=NA)
heatmap(reprunedassmatrix[,2:16], col=c("white", "orange"), Rowv=NA, Colv=NA)
heatmap(reprunedassmatrix[,2:6], col=c("white", "orange"), Rowv=NA, Colv=NA)
reprunedassmatrix[,2:6]
reprunedassmatrix = as.numeric(reprunedassmatrix)
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
fix(reprunedassmatrix)
heatmap(reprunedassmatrix[,2:9], col=c("white", "orange"), Rowv=NA, Colv=NA)
reprunedassmatrix[,2:16] = as.numeric(reprunedassmatrix[,2:16])
heatmap(reprunedassmatrix[,2:9], col=c("white", "orange"), Rowv=NA, Colv=NA)
View(reprunedassmatrix)
reprunedmatrix[3,3] + reprunedassmatrix[4,4]
reprunedassmatrix[3,3] + reprunedassmatrix[4,4]
reprunedassmatrix = as.numeric(reprunedassmatrix[,2:16])
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
reprunedassmatrix = reprunedassmatrix[,2:16]
class(reprunedassmatrix) <- "numeric"
heatmap(reprunedassmatrix[,2:9], col=c("white", "orange"), Rowv=NA, Colv=NA)
rownames(reprunedassmatrix) = rownames(dcast(as.data.frame(reprunedass), amphipod~host, length))
heatmap(reprunedassmatrix[,2:9], col=c("white", "orange"), Rowv=NA, Colv=NA)
View(reprunedassmatrix)
xy = reprunedassmatrix
rownames(xy)
dcast(as.data.frame(reprunedass), amphipod~host, length)
dcast(reprunedass, amphipod~host, length)
rownames(reprunedassmatrix) = dcast(as.data.frame(reprunedass), amphipod~host, length)[,1]
heatmap(reprunedassmatrix[,2:9], col=c("white", "orange"), Rowv=NA, Colv=NA)
gheatmap(ultram, reprunedassmatrix)
gheatmap(p, reprunedassmatrix)
yx = ggtree(ultram)
yx
yx = ggtree(ultram) + geom_tiplab(aes(angle=angle), color='blue')
yx
ggtree(ultram, layout="circular") + geom_tiplab(color='blue')
yx
yx = ggtree(ultram) + geom_tiplab(color='blue')
yx
gheatmap(yx, reprunedassmatrix)
