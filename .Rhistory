2*(1-pf(ts, length(which(energy$stature == "obese"))-1, length(which(energy$stature == "lean"))-1))
#pvalue = 0.679746
#alternatively...
var.test(energy[which(energy$stature == "obese"),"expend"], energy[which(energy$stature == "lean"),"expend"], alternative = "two.sided")
#F = 1.2748, num df = 8, denom df = 12, p-value = 0.6797
#11) Given such a high p-value, I conclude we should not reject the Ho based on this data. This pvalue estimates a 67% probability of observing this data given Ho was to be true. Hence, I conclude lean and obese women have the same variance for energy expense.
#12) Because the null hypothesis is that mu1 = mu2, thus mu1-mu2 = 0.
#13)
mytwosamplettest = function(pop1, pop2) {
mean1 = mean(pop1)
mean2 = mean(pop2)
n1 = length(pop1)
n2 = length(pop2)
s1 = sd(pop1)
s2 = sd(pop2)
TS = (mean1-mean2)/sqrt(((1/n1)+(1/n2))*(((s1^2)*(n1-1))+((s2^2)*(n2-1)))/(n1+n2-2))
return(TS)
}
mytwosamplettest(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"])
#Ans: -3.945565
#14)
mytwosamplettest = function(pop1, pop2) {
mean1 = mean(pop1)
mean2 = mean(pop2)
n1 = length(pop1)
n2 = length(pop2)
s1 = sd(pop1)
s2 = sd(pop2)
TS = (mean1-mean2)/sqrt(((1/n1)+(1/n2))*(((s1^2)*(n1-1))+((s2^2)*(n2-1)))/(n1+n2-2))
print("Test statistic:")
print(TS)  #a)
print("Degrees of freedom:")
print(n1+n2-2) #b)
Pvalue = 2*pt(TS, (n1+n2-2))
print("p-value for the alternative hypothesis (mu1 != mu2):")
print(Pvalue) #c)
return(TS)
}
#15) H1: mu1 > mu2
#The population1 mean is larger than the population2 mean
#pvalue: pt(TS, (n1+n2-2))
#Still area to left, as it corresponds to the alternative, but not 2* as it is only one tail we are concerned with.
#Checking answers:
var.test(energy$expend~energy$stature)
t.test(energy$expend~energy$stature, var.equal=T)
t.test(energy$expend[which(energy$stature=="lean")],energy$expend[which(energy$stature=="obese")], var.equal=T)
##Paragraph##
#I. In this assignment we looked at a dataset that described the energy expenditure in MJ of women who were either lean or obese.
#II. Figure 1 shows the distributions of the variable "Energy expense (MJ)" for each subset of the data: lean women, and obese women. We can see how the "Obese" distribution has a larger median than the "Lean" distribution.
#III. I concluded that the variance of the energy expense for obese women was not significantly larger than that for lean women (one-tailed p = 0.6797, Ftest statistic = 1.2748). However, I concluded that the mean energy expense for lean women was significantly different than that for obese women (two-tailed p = 0.000799, Ttest statistic = -3.9456).
#IV. The homocedasticity test was carried out to check if the distributions analyzed could have come from populations with the same variances. This is important beacouse is a critical assumption to be able to carry out the Ttest for 2 samples.
2*(1-pf(ts, length(which(energy$stature == "obese"))-1, length(which(energy$stature == "lean"))-1))
var.test(energy$expend~energy$stature)
mytwosamplettest(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"])
#Ans: -3.945565
#14)
mytwosamplettest = function(pop1, pop2) {
mean1 = mean(pop1)
mean2 = mean(pop2)
n1 = length(pop1)
n2 = length(pop2)
s1 = sd(pop1)
s2 = sd(pop2)
TS = (mean1-mean2)/sqrt(((1/n1)+(1/n2))*(((s1^2)*(n1-1))+((s2^2)*(n2-1)))/(n1+n2-2))
print("Test statistic:")
print(TS)  #a)
print("Degrees of freedom:")
print(n1+n2-2) #b)
Pvalue = 2*pt(TS, (n1+n2-2))
print("p-value for the alternative hypothesis (mu1 != mu2):")
print(Pvalue) #c)
return(TS)
}
mytwosamplettest(energy[which(energy$stature == "lean"),"expend"], energy[which(energy$stature == "obese"),"expend"])
library(stringr)
library(ape)
library(phytools)
#library(ggtree)
library(reshape2)
#library(igraph)
#library(network)
#library(dendextend)
library(picante)
library(paco)
setwd("~/Documents/0BIOL_Phylogenetics/phylobio_final_project")
ass = unique(read.table("Associations.csv", sep = '\t', header = T)[,c(1,2)])
amphipods = sort(as.vector(unique(ass$amphipod)))
hosts = sort(as.vector(unique(ass$host)))
hosts
assmatrix = dcast(ass, amphipod~host, length)
rownames(assmatrix) = assmatrix[,1]
heatmap(as.matrix(assmatrix[,2:94]), col=c("white", "orange"), Rowv=NA, Colv=NA)
amphipodML = read.tree("Amphipods/Interesting\ amphipods/RAxML/OI_constrained/RAxML_bipartitions.datamphipodOI18S_ML_constrained")
plot(amphipodML)
amphipodML$tip.label[which(amphipodML$tip.label == "Phronima_species")] = "Phronima_sedentaria"
amphipodML$tip.label[which(amphipodML$tip.label == "Paraphronima_species")] = "Paraphronima_gracilis"
amphipodML = drop.tip(amphipodML, which(amphipodML$tip.label == "Lestrigonus_bengalensis"))
plot(amphipodML)
nodelabels()
amphipodML=reroot(amphipodML, 76)
plot(amphipodML)
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.host_ext2_ML_boot100")
plot(MLext)
MLext = reroot(MLext, 80)
plot(MLext)
plot(TREE)
MLext$tip.label[which(MLext$tip.label == "Bolinopsis_sp.")] = "Bolinopsis_vitrea"
MLext$tip.label[which(MLext$tip.label == "Cavolinia_sp.")] = "Cavolinia_longirostris"
MLext$tip.label[which(MLext$tip.label == "Solmissus sp.")] = "Solmissus_incissa"
TREE = MLext
plot(TREE)
MLext = read.tree("ExtendedHosts/RAxML/RAxML_bipartitions.host_ext2_ML_boot100")
plot(MLext)
nodelabels()
MLext = reroot(MLext, 80)
plot(MLext)
MLext$tip.label
MLext$tip.label[which(MLext$tip.label == "Bolinopsis_sp.")] = "Bolinopsis_vitrea"
MLext$tip.label[which(MLext$tip.label == "Cavolinia_sp.")] = "Cavolinia_longirostris"
MLext$tip.label[which(MLext$tip.label == "Solmissus sp.")] = "Solmissus_incissa"
TREE = MLext
plot(TREE)
TREE$tip.label = str_replace_all(TREE$tip.label,'_',' ')
plot(TREE)
amphipodML$tip.label = str_replace_all(amphipodML$tip.label,'_',' ')
TREE$tip.label
amphipodML$tip.label
amphispp = amphipodML$tip.label
View(assmatrix)
prunedmatrix = assmatrix[which(assmatrix$amphipod %in% amphispp),]
prunedass = as.matrix(ass[which(ass$amphipod %in% amphispp),])
View(prunedass)
prunedass[,2] = as.matrix(str_replace_all(prunedass[,2],'conica','sp.'))
heatmap(as.matrix(prunedmatrix[,2:ncol(prunedmatrix)]), col=c("white", "orange"), Rowv=NA, Colv=NA)
sharedspp = as.vector(prunedass[,2][which(prunedass[,2] %in% TREE$tip.label)])
sharedspp
unique(sharedspp)
nodatatipnames = TREE$tip.label[which(!(TREE$tip.label %in% unique(sharedspp)))]
nodatatipnames
nodatatips = which(TREE$tip.label %in% nodatatipnames)
nodatatips
prunedtree = drop.tip(TREE, nodatatips)
prunedtree$tip.label
plot(prunedtree)
ultram = chronos(prunedtree)
plot(ultram)
reprunedass = as.matrix(prunedass[which(prunedass[,2] %in% ultram$tip.label),])
View(reprunedass)
reprunedass$host
reprunedass[,2]
length(reprunedass[,2])
length(unique(reprunedass[,2]))
length(reprunedass[,1])
length(unique(reprunedass[,1]))
length(ultram$tip.label)
length(amphipodML$tip.label)
reprunedassmatrix = as.matrix(dcast(as.data.frame(reprunedass), amphipod~host, length))
reprunedassmatrix = reprunedassmatrix[,2:ncol(reprunedassmatrix)]
View(reprunedassmatrix)
class(reprunedassmatrix) <- "numeric"
rownames(reprunedassmatrix) = dcast(as.data.frame(reprunedass), amphipod~host, length)[,1]
heatmap(reprunedassmatrix[,2:ncol(reprunedassmatrix)], col=c("white", "orange"), Rowv=NA, Colv=NA)
length(rownames(reprunedassmatrix))
length(unique(rownames(reprunedassmatrix)))
length(colnames(reprunedassmatrix))
length(unique(colnames(reprunedassmatrix)))
ultram$tip.label
ultramphipod$tip.label
amphipodML$tip.label
prunedamphipodML = drop.tip(amphipodML, which(!(amphipodML$tip.label %in% rownames(reprunedassmatrix))))
ultramphipod = chronos(prunedamphipodML)
plot(ultramphipod)
ultramphipod$tip.label
reprunedassmatrix = reprunedassmatrix[match(ultramphipod$tip.label, rownames(reprunedassmatrix)),]
prunedmatrix_nosppcol = prunedmatrix[,-1]
comm = t(prunedmatrix_nosppcol)
comm = comm[rowSums(comm)!=0,]
dim(comm)
prunecomm = comm[,which(colnames(comm) %in% ultramphipod$tip.label)]
dim(prunecomm)
reprunedass = as.data.frame(reprunedass)
#write.table(reprunedass, "reprunedass.txt", sep='\t')
rownames(reprunedass) = 1:nrow(reprunedass)
cophyloplot(ultramphipod, ultram, assoc = reprunedass, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
table(reprunedass[,2])
specificity = as.vector(table(reprunedass[,1]))
names(specificity) = names(table(reprunedass[,1]))
contMap(ultramphipod, specificity)
Kcalc(specificity, ultramphipod)
popularity = as.vector(table(reprunedass[,2]))
names(popularity) = names(table(reprunedass[,2]))
contMap(ultram, popularity)
Kcalc(popularity, ultram)
flatamphipod = ultramphipod
flatamphipod$edge.length = rep(1,length(flatamphipod$edge.length))
plot(flatamphipod)
contMap(flatamphipod, specificity)
Kcalc(specificity, flatamphipod)
flatam = ultram
flatam$edge.length = rep(1,length(flatam$edge.length))
contMap(flatam, popularity)
Kcalc(popularity, flatamphipod)
Kcalc(popularity, flatam)
Kcalc(specificity, flatamphipod)
pdist_amphipods = as.dist(cophenetic(ultramphipod))
pdist_hosts = as.dist(cophenetic(ultram))
adist_amphipods = species.dist(t(reprunedassmatrix))
adist_hosts = species.dist(t(reprunedassmatrix))
mantel_amphi = mantel.rtest(pdist_amphipods, adist_amphipods, nrepet = 9999)
mantel_host = mantel.rtest(pdist_hosts, adist_hosts, nrepet = 9999)
library(ade4)
mantel_amphi = mantel.rtest(pdist_amphipods, adist_amphipods, nrepet = 9999)
mantel_host = mantel.rtest(pdist_hosts, adist_hosts, nrepet = 9999)
adist_amphipods = species.dist(reprunedassmatrix)
adist_hosts = species.dist(t(reprunedassmatrix))
mantel_amphi = mantel.rtest(pdist_amphipods, adist_amphipods, nrepet = 9999)
mantel_host = mantel.rtest(pdist_hosts, adist_hosts, nrepet = 9999)
species.dist(reprunedassmatrix)
species.dist(t(reprunedassmatrix))
dim(as.matrix(species.dist(t(reprunedassmatrix))))
dim(as.matrix(species.dist(reprunedassmatrix)))
dim(cophenetic(ultramphipod))
dim(cophenetic(ultram))
mantel.rtest(as.dist(pdist_hosts),as.dist(adist_hosts), 99)
mantel.test(as.matrix(pdist_hosts),as.matrix(adist_hosts), 99)
as.matrix(pdist_hosts)
dim(as.matrix(pdist_hosts))
heatmap(adist_hosts)
heatmap(as.matrix(adist_hosts))
adist_amphipods = species.dist(t(reprunedassmatrix))
adist_hosts = species.dist(reprunedassmatrix)
mantel_amphi = mantel.rtest(pdist_amphipods, adist_amphipods, nrepet = 9999)
mantel_host = mantel.rtest(pdist_hosts, adist_hosts, nrepet = 9999)
mantel_host
mantel_amphi
flatdist_amphipods = as.dist(cophenetic(flatamphipod))
flatdist_hosts = as.dist(cophenetic(flatam))
flatdist_amphipods = as.dist(cophenetic(flatamphipod))
flatdist_hosts = as.dist(cophenetic(flatam))
mantel.rtest(flatdist_amphipods, adist_amphipods, nrepet = 9999)
mantel.rtest(flatdist_hosts, adist_hosts, nrepet = 9999)
multiPhylosignal(t(reprunedassmatrix), ultramphipod)
multiPhylosignal(t(reprunedassmatrix), ultram)
multiPhylosignal(t(reprunedassmatrix), ultram)
multiPhylosignal(reprunedassmatrix, ultram)
mean(multiPhylosignal(t(reprunedassmatrix), ultram))
View(multiPhylosignal(t(reprunedassmatrix), ultram))
mean(multiPhylosignal(t(reprunedassmatrix), ultram)[,1])
mean(multiPhylosignal(reprunedassmatrix, ultramphipod)[,1])
View(multiPhylosignal(reprunedassmatrix, ultramphipod)
)
sd(multiPhylosignal(t(reprunedassmatrix), ultram)[,1])
sd(multiPhylosignal(reprunedassmatrix, ultramphipod)[,1])
qt(2.1944, 18)
pt(2.1944, 18, lower.tail = F)
pt(5.2, 29, lower.tail = F)
plot((multiPhylosignal(reprunedassmatrix, ultramphipod)[,1])
)
plot(multiPhylosignal(t(reprunedassmatrix), ultram))
plot(multiPhylosignal(t(reprunedassmatrix), ultram)[,1])
hist(multiPhylosignal(t(reprunedassmatrix), ultram)[,1])
hist((multiPhylosignal(reprunedassmatrix, ultramphipod)[,1]))
hosthc = hclust(adist_hosts)
amphihc = hclust(adist_amphipods)
plot(hosthc)
plot(amphihc)
Bk_plot(as.dendro(ultram), hosthc)
library(dendextend)
Bk_plot(as.dendro(ultram), hosthc)
Bk_plot(as.dendrogram(ultram), hosthc)
Bk_plot(as.dendrogram(ultramphipod), amphihc)
Parafit = parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
Parafit = parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), t(reprunedassmatrix))
Parafit
Parafit = parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), t(reprunedassmatrix))
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), t(reprunedassmatrix))
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)]
View(comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
dim(comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
View(t(reprunedassmatrix))
dim(t(reprunedassmatrix))
which(row.names(t(reprunedassmatrix)) %in% rownames(comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)]))
rownames(comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])[19]
rownames(t(reprunedassmatrix))[19]
ultram$tip.label
View(comm)
rownames(comm)[which(rownames(comm) == "Pandea conica")] = "Pandea sp."
Parafit = parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
Parafit
parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), t(reprunedassmatrix))
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), comm[which(rownames(comm) %in% ultram$tip.label),which(colnames(comm) %in% ultramphipod$tip.label)])
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), t(reprunedassmatrix))
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
Parafit = parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), t(reprunedassmatrix))
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), t(reprunedassmatrix))
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
Parafit
parafit(as.matrix(cophenetic(flatam)),as.matrix(cophenetic(flatamphipod)), t(reprunedassmatrix))
parafit(as.matrix(cophenetic(flatam)),as.matrix(cophenetic(flatamphipod)), t(reprunedassmatrix), correction = 'cailliez')
parafit(as.matrix(cophenetic(ultram)),as.matrix(cophenetic(ultramphipod)), t(reprunedassmatrix), correction = 'cailliez')
D = prepare_paco_data(cophenetic(flatam), cophenetic(flatamphipod), t(reprunedassmatrix))
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
D = prepare_paco_data(cophenetic(flatam), cophenetic(flatamphipod), t(reprunedassmatrix))
D = add_pcoord(D)
D = prepare_paco_data(cophenetic(ultram), cophenetic(ultramphipod), t(reprunedassmatrix))
D = add_pcoord(D)
D = PACo(D, nperm=100, seed=42, method="r0", correction='cailliez')
print(D$gof)
D
cophenetic(flatam)
cophenetic(ultram)
Bk_plot(as.dendrogram(flatam), hosthc)
Bk_plot(as.dendrogram(flatamphipod), amphihc)
Bk_plot(as.dendrogram(ultram(flatam)), hosthc)
Bk_plot(as.dendrogram(ultram(flatamphipod)), amphihc)
Bk_plot(as.dendrogram(chronos(flatam)), hosthc)
Bk_plot(as.dendrogram(chronos(flatamphipod)), amphihc)
mean(multiPhylosignal(t(reprunedassmatrix), flatam)[,1])
sd(multiPhylosignal(t(reprunedassmatrix), flatam)[,1])
mean(multiPhylosignal(reprunedassmatrix, flatamphipod)[,1])
sd(multiPhylosignal(reprunedassmatrix, flatamphipod)[,1])
cophyloplot(ultramphipod, ultramphipod, assoc = melt(as.matrix(adist_amphipods)), type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
melt(as.matrix(adist_amphipods))
competition = melt(as.matrix(adist_amphipods))
colnames(competition)
colnames(competition) = c("amphi1", "amphi2", "score")
competition = competition[which(competition$score > 0),c(1:2)]
cophyloplot(ultramphipod, ultramphipod, assoc = competition, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
competition = melt(as.matrix(adist_amphipods))
colnames(competition) = c("amphi1", "amphi2", "score")
competition = unique(competition[which(competition$score > 0),c(1:2)])
View(competition)
competition = t(apply(competition, 1, sort))
View(competition)
competition = melt(as.matrix(adist_amphipods))
colnames(competition) = c("amphi1", "amphi2", "score")
competition = competition[which(competition$score > 0),c(1:2)]
competition = competition[!duplicated(t(apply(competition, 1, sort))),]
cophyloplot(ultramphipod, ultramphipod, assoc = competition, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
View(competition)
competition = competition[sample(nrow(competition)),]
cophyloplot(ultramphipod, ultramphipod, assoc = competition, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
competition = melt(as.matrix(adist_amphipods))
colnames(competition) = c("amphi1", "amphi2", "score")
competition = melt(as.matrix(adist_amphipods))
colnames(competition) = c("amphi1", "amphi2", "score")
competition = competition[which(competition$score > 0.00001 | competition$score < -0.00001),c(1:2)]
competition = competition[!duplicated(t(apply(competition, 1, sort))),]
cophyloplot(ultramphipod, ultramphipod, assoc = competition, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="orange")
phylostruct(prunecomm, cophenetic(ultramphipod))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3)
prunecomm = comm[,which(colnames(comm) %in% ultramphipod$tip.label)]
#add the phylocom even and random rows
even = rep(0.5,ncol(prunecomm))
random = runif(ncol(prunecomm), 0,1)
prunecomm = rbind(rbind(prunecomm, even), random)
#Test for community phylogenetic clustering/overdispersion
mntd(prunecomm, cophenetic(ultramphipod))
mpd(prunecomm, cophenetic(ultramphipod))
ses.mntd(prunecomm, cophenetic(ultramphipod))
ses.mpd(prunecomm, cophenetic(ultramphipod))
PSClustering = psc(prunecomm, cophenetic(ultramphipod))
mean(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))])
par(mar=rep(5,4))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3)
par(oma=rep(2,4))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3)
par(oma=rep(3,4))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3)
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3, cex.names = 0.5)
par(oma=rep(2,4))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3, cex.names = 0.5)
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3, cex.names = 0.7)
par(oma=rep(2.9,4))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3, cex.names = 0.7)
par(oma=rep(3.1,4))
barplot(PSClustering$PSCs[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], names.arg = rownames(PSClustering)[which(!is.na(PSClustering$PSCs[1:(nrow(PSClustering)-2)]))], col='magenta', las=3, cex.names = 0.7)
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), dcast(competition, amphi1 ~ amphi2), correction = 'cailliez')
dcast(competition, amphi1 ~ amphi2)
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), dcast(competition, amphi1 ~ amphi2, length), correction = 'cailliez')
assmatrix
dcast(competition, amphi1 ~ amphi2, length())
dcast(competition, amphi1 ~ amphi2, length)
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), dcast(competition, amphi1 ~ amphi2, length), correction = 'cailliez')
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), as.numeric(dcast(competition, amphi1 ~ amphi2, length)), correction = 'cailliez')
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), as.matrix(dcast(competition, amphi1 ~ amphi2, length)), correction = 'cailliez')
compmatrix = as.matrix(dcast(competition, amphi1 ~ amphi2, length))
View(compmatrix)
rownames(compmatrix) = compmatrix[,1]
compmatrix = compmatrix[,-1]
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), compmatrix, correction = 'cailliez')
compmatrix
class(compmatrix) = "numeric"
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), compmatrix, correction = 'cailliez')
compmatrix
pf_comp = parafit(as.matrix(cophenetic(ultramphipod)),as.matrix(cophenetic(ultramphipod)), compmatrix, correction = 'cailliez')
atree1 = drop.tip(ultramphipod, which(!(ultamphipod$tip.label %in% rownames(compmatrix))))
atree1 = drop.tip(ultramphipod, which(!(ultramphipod$tip.label %in% rownames(compmatrix))))
atree2 = drop.tip(ultramphipod, which(!(ultramphipod$tip.label %in% colnames(compmatrix))))
pf_comp = parafit(as.matrix(cophenetic(atree1)),as.matrix(cophenetic(atree2)), compmatrix, correction = 'cailliez')
pf_comp
cophyloplot(atree1, atree2, assoc = melt(compmatrix), type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="red")
cophyloplot(atree1, atree2, assoc = competition, type="phylogram", space=110, gap=0,show.tip.label=T, use.edge.length=F, col="red")
flatatree1 = atree1
flatatree1$edge.length = rep(1, length(flatatree1))
flatatree2 = atree2
flatatree2$edge.length = rep(1, length(flatatree2))
pf_comp_flat = parafit(as.matrix(cophenetic(flatatree1)),as.matrix(cophenetic(flatatree2)), compmatrix, correction = 'cailliez')
pf_comp_flat
as.matrix(cophenetic(flatatree1))
plot(flatatree1)
flatatree1 = atree1
flatatree2 = atree2
flatatree1 = atree1
flatatree1$edge.length = 1
flatatree2 = atree2
flatatree2$edge.length = 1
plot(flatatree1)
flatatree1 = atree1
plot(flatatree1)
flatatree1$edge.length
flatatree1$edge.length = rep(mean(flatatree1$edge.length), length(flatatree1$edge.length))
flatatree1$edge.length
plot(flatatree1)
flatatree2$edge.length = rep(mean(flatatree2$edge.length), length(flatatree2$edge.length))
pf_comp_flat = parafit(as.matrix(cophenetic(flatatree1)),as.matrix(cophenetic(flatatree2)), compmatrix, correction = 'cailliez')
pf_comp_flat
pf_comp_flat = parafit(as.matrix(cophenetic(flatatree1)),as.matrix(cophenetic(flatatree2)), t(competition), correction = 'cailliez')
pf_comp_flat = parafit(as.matrix(cophenetic(flatatree1)),as.matrix(cophenetic(flatatree2)), t(compmatrix), correction = 'cailliez')
as.matrix(cophenetic(flatatree1))
t(compmatrix)
pf_comp_flat = parafit(as.matrix(cophenetic(flatatree1)),as.matrix(cophenetic(flatatree2)), t(compmatrix), correction = 'cailliez')
pf_comp_flat
pf_comp_flat = parafit(as.matrix(cophenetic(flatatree1)),as.matrix(cophenetic(flatatree2)), compmatrix, correction = 'cailliez')
View(reprunedassmatrix)
pruneweb = t(reprunedassmatrix)
discrepancy(pruneweb)
library(bipartite)
discrepancy(pruneweb)
pdi = PDI(pruneweb) #paired differences index
pac = PAC(pruneweb) #potential for apparent competition
visweb(pruneweb)
togetherness(pruneweb) #T-score, level of similarity between species
grouplevel(pruneweb)
robustness(second.extinct(pruneweb))
C.score(pruneweb)
3.9*19
74+35
213/393
74/109
4.549296/3.375587
3.90566 / 2.471698
parafit(as.matrix(cophenetic(flatam)),as.matrix(cophenetic(flatamphipod)), t(reprunedassmatrix), correction = 'cailliez')
parafit(as.matrix(cophenetic(flatam)),as.matrix(cophenetic(flatamphipod)), t(reprunedassmatrix), correction = 'cailliez', test.links = T)
plotweb(web)
assnet = as.network(as.matrix(ass))
plot(assnet)
amphinet = as.network(melt(as.matrix(adist_amphipods))[which(melt(as.matrix(adist_amphipods))[,3] > 0.2),-3])
hostnet = as.network(melt(as.matrix(adist_hosts))[which(melt(as.matrix(adist_hosts))[,3] > 0.2),-3])
plot(amphinet)
plot(hostnet)
amphiALL = as.network(melt(as.matrix(adist_amphipods))[,-3])
hostALL = as.network(melt(as.matrix(adist_hosts))[,-3])
web = t(assmatrix[,-1])
discrepancy(web)
pdi = PDI(web) #paired differences index
pac = PAC(web) #potential for apparent competition
visweb(web)
togetherness(web) #T-score, level of similarity between species
grouplevel(web)
robustness(second.extinct(web))
C.score(web)
plotweb(web)
#on the phylogeny species:
pruneweb = t(reprunedassmatrix)
discrepancy(pruneweb)
pdi = PDI(pruneweb) #paired differences index
pac = PAC(pruneweb) #potential for apparent competition
visweb(pruneweb)
togetherness(pruneweb) #T-score, level of similarity between species
grouplevel(pruneweb)
robustness(second.extinct(pruneweb))
C.score(pruneweb)
plotweb(web)
plotweb(pruneweb)
View(web)
names(web)
colnames(web)
