fp      = "./"
area_fn = fp + "data/Temnospondyls.atlas.txt"
data_fn = fp + "data/Biogeographical_Matrix.nex"
tree_fn = fp + "data/GTRseed1.nex"
out_fn  = fp + "output/bg_large"
data  <- readDiscreteCharacterData(data_fn)
tree  <- readTrees(tree_fn)[1]
atlas <- readAtlas(area_fn)

n_areas = atlas.nAreas()
n_nodes = tree.nnodes()

mvi = 1
mni = 1
ngen = 30000

# save a copy of the tree with node indexes (for later use)
write(tree,filename=tree_fn+".index.tre")

# biogeographical clock
clock_bg ~ dnExp(10.)
clock_bg.setValue(rexp(1,100.)[1])
moves[mvi++] = mvScale(clock_bg, lambda=0.5, weight=5.0)

# area gain-loss rate simplex
glr ~ dnDirichlet([1,1])
moves[mvi++] = mvSimplexElementScale(glr, alpha=50.0, weight=5.0)

# nicknames for gain-loss rate elements
r_gain := glr[1]
r_loss := glr[2]

# per-area rate matrix
q_area := fnFreeBinary(glr)

# distance power parameter
dp ~ dnExp(1)
moves[mvi++] = mvScale(x=dp, lambda=0.5, weight=5.0)

# geographical distance rate modifier
grm := fnBiogeoGRM(atlas=atlas, distancePower=dp, useAvailable=false, useDistance=true)

# per-range rate matrix
q_range := fnBiogeoDE(gainLossRates=q_area, branchRates=clock_bg, geoRateMod=grm, numAreas=atlas.nAreas(), forbidExtinction=true)

# cladogenesis probabilities
clado_prob ~ dnDirichlet([1,1,1])
widespread_sympatry := clado_prob[1]
subset_sympatry     := clado_prob[2]
allopatry           := clado_prob[3]
moves[mvi++] = mvSimplexElementScale(clado_prob, alpha=50.0, weight=5.0)


# the model
m ~ dnPhyloDACTMC(tree=tree, Q=q_range, cladoProbs=clado_prob, type="Biogeo", forbidExtinction=true, useCladogenesis=true)
m.clamp(data)
m.lnProbability()

# data augmentation proposals
moves[mvi++] = mvCharacterHistory(ctmc=m, qmap=q_range, tree=tree, lambda=0.01, type="Biogeo", graph="node", proposal="rejection", weight=n_nodes*5)
moves[mvi++] = mvCharacterHistory(ctmc=m, qmap=q_range, tree=tree, lambda=0.01, type="Biogeo", graph="branch", proposal="rejection", weight=n_nodes*1)
moves[mvi++] = mvCharacterHistory(ctmc=m, qmap=q_range, tree=tree, lambda=0.20, type="Biogeo", graph="node", proposal="rejection", weight=n_nodes*5)
moves[mvi++] = mvCharacterHistory(ctmc=m, qmap=q_range, tree=tree, lambda=0.20, type="Biogeo", graph="branch", proposal="rejection", weight=n_nodes*1)
moves[mvi++] = mvCharacterHistory(ctmc=m, qmap=q_range, tree=tree, lambda=1.00, type="Biogeo", graph="node", proposal="rejection", weight=n_nodes*5)
moves[mvi++] = mvCharacterHistory(ctmc=m, qmap=q_range, tree=tree, lambda=1.00, type="Biogeo", graph="branch", proposal="rejection", weight=n_nodes*1)

# create the model
my_model = model(m)

# add standard monitors
monitors[mni++] = mnScreen(printgen=1000, clock_bg, r_gain, r_loss, dp, subset_sympatry, allopatry, widespread_sympatry)
monitors[mni++] = mnFile(clock_bg, r_gain, r_loss, dp, subset_sympatry, allopatry, widespread_sympatry, filename=out_fn+".params.txt", printgen=10)

# add special data augmentation monitors
monitors[mni++] = mnCharHistoryNewick(filename=out_fn+".events.txt", ctmc=m, tree=tree, printgen=100, style="events")
monitors[mni++] = mnCharHistoryNewick(filename=out_fn+".counts.txt", ctmc=m, tree=tree, printgen=100, style="counts")

# add animation monitor
monitors[mni++] = mnCharHistoryNhx(filename=out_fn+".phw.txt", ctmc=m, tree=tree, atlas=atlas, samplegen=100, maxgen=ngen, burnin=0.5)

# create mcmc
my_mcmc = mcmc(my_model, monitors, moves)

# run mcmc (without burn-in)
my_mcmc.run(generations=ngen)


# you may want to quit RevBayes now
q()
